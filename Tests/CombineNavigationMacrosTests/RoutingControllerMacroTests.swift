import XCTest
import MacroTesting
import CombineNavigationMacros

final class RoutingControllerTests: XCTestCase {
	override func invokeTest() {
		withMacroTesting(
			isRecording: false,
			macros: [
				"RoutingController": RoutingControllerMacro.self
			]
		) {
			super.invokeTest()
		}
	}

	func testAttachmentToStruct() {
		assertMacro {
			"""
			@RoutingController
			struct CustomController {}
			"""
		} diagnostics: {
			"""
			@RoutingController
			struct CustomController {}
			â•°â”€ ðŸ›‘ `@RoutingController` must be attached to a class declaration.
			"""
		}
	}

	func testAttachmentToEnum() {
		assertMacro {
			"""
			@RoutingController
			enum CustomController {}
			"""
		} diagnostics: {
			"""
			@RoutingController
			enum CustomController {}
			â•°â”€ ðŸ›‘ `@RoutingController` must be attached to a class declaration.
			"""
		}
	}

	func testAttachmentToActor() {
		assertMacro {
			"""
			@RoutingController
			actor CustomController {}
			"""
		} diagnostics: {
			"""
			@RoutingController
			actor CustomController {}
			â•°â”€ ðŸ›‘ `@RoutingController` must be attached to a class declaration.
			"""
		}
	}

	func testAttachmentToClass() {
		assertMacro {
			"""
			@RoutingController
			final class CustomController {
				@Destination
				var firstDetailController: UIViewController?
				@Destination
				var secondDetailController: UIViewController?
			}
			"""
		} expansion: {
			"""
			final class CustomController {
				@Destination
				var firstDetailController: UIViewController?
				@Destination
				var secondDetailController: UIViewController?
			}

			extension CustomController: CombineNavigation.RoutingControllerProtocol {
				/// Container for captured destinations without referring to self
				///
				/// > Generated by `CombineNavigation.RoutingController` macro
				///
				/// Use in `navigationDestination`/`navigationStack` methods to map
				/// routes to specific destinations using `destinations` method
				public struct Destinations {
					@Destination
					var firstDetailController: UIViewController?
					@Destination
					var secondDetailController: UIViewController?
				}

				public func _makeDestinations() -> Destinations {
					Destinations(
						firstDetailController: $firstDetailController,
						secondDetailController: $secondDetailController
					)
				}
			}
			"""
		}
	}

	func testCustomDeclaration() {
		assertMacro {
			"""
			@RoutingController
			final class CustomController {
				@CustomDestination
				var firstDetailController: UIViewController?
				@CustomDestination
				var secondDetailController: UIViewController?
			}
			"""
		} expansion: {
			"""
			final class CustomController {
				@CustomDestination
				var firstDetailController: UIViewController?
				@CustomDestination
				var secondDetailController: UIViewController?
			}

			extension CustomController: CombineNavigation.RoutingControllerProtocol {
				/// Container for captured destinations without referring to self
				///
				/// > Generated by `CombineNavigation.RoutingController` macro
				///
				/// Use in `navigationDestination`/`navigationStack` methods to map
				/// routes to specific destinations using `destinations` method
				public struct Destinations {
					@CustomDestination
					var firstDetailController: UIViewController?
					@CustomDestination
					var secondDetailController: UIViewController?
				}

				public func _makeDestinations() -> Destinations {
					Destinations(
						firstDetailController: $firstDetailController,
						secondDetailController: $secondDetailController
					)
				}
			}
			"""
		}
	}
}
